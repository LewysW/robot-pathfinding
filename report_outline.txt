Overview:

Discuss potential fields and aim of practical

Compilation/Execution Instructions:

Explain how to run .jar file and configurations of GUI (i.e. clicking 'Fractional Progress' button, 
setting robot size to 30 and scanner radius to 60).

Part 1 - Free Space Travel

	Design of Part 1: 
	
		- explain the changes made in PotentialFields.java to allow for a third button and the 
		  calling of fracProgMove()
		- Explain the additions to PotentialFieldsRobot.java for fractional progress, such as 			  fracProgMove(), evaluateSamplePointsFracProg(), and evaluateMoveFracProg().
		- Discuss evaluateMoveFracProg and how it uses p/p+f (initially without obstacle potential).
	
	Compare efficiency of two planners (greedy vs non-greedy) where each uses the most appropriate of the two 		goal distance measures: 
		- Give idea of efficiency of each (?) planner in free space:
			- graph total moves taken, and
			- graph lengths and total turns of the paths performed. 
		- (?) Report on principles by which move parameters are set. 		
		- (?) Which is the optimal set-up across all the planners for free space travel and why?


Part 2 - Obstacle Navigation
	
	Design of Part 2:
		- explain incorporation of obstacle potential into evalMoveFracProg() function
		- explain functions to attempt winding/unwinding
		
	Screenshot basic obstacle courses that robot can deal with (and discuss effectiveness and efficiency):
		- easy
		- medium
		- hard - have C shaped course, as well as course with close together obstacles and explain why 			  robot gets stuck
		- Conclude as to which of the two types of planner appear best for obstacle navigation and give 		  reasons, also specify whether this is due to particular settings of is an inherent feature of the 			  field type
















